{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/home/alexey/test-app-shou-dao/pages/components/ApplyRandomPrices.js\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  mutation productVariantUpdate($input: ProductVariantInput!) {\\n    productVariantUpdate(input: $input) {\\n      product {\\n        title\\n      }\\n      productVariant {\\n        id\\n        price\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState } from 'react';\nimport gql from 'graphql-tag';\nimport { Mutation } from 'react-apollo';\nimport { Layout, Button, Banner, Toast, Stack, Frame } from '@shopify/polaris';\nimport { Context } from '@shopify/app-bridge-react'; // GraphQL mutation that updates the prices of products\n\nvar UPDATE_PRICE = gql(_templateObject());\n\nvar ApplyRandomPrices = /*#__PURE__*/function (_React$Component) {\n  _inherits(ApplyRandomPrices, _React$Component);\n\n  var _super = _createSuper(ApplyRandomPrices);\n\n  function ApplyRandomPrices() {\n    _classCallCheck(this, ApplyRandomPrices);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(ApplyRandomPrices, [{\n    key: \"render\",\n    value: function render() {\n      var _this = this,\n          _s = $RefreshSig$();\n\n      return (// Uses mutation's input to update product prices\n        __jsx(Mutation, {\n          mutation: UPDATE_PRICE,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 27,\n            columnNumber: 13\n          }\n        }, _s(function (handleSubmit, _ref) {\n          _s();\n\n          var error = _ref.error,\n              data = _ref.data;\n\n          var _useState = useState(false),\n              hasResults = _useState[0],\n              setHasResults = _useState[1];\n\n          var showError = error && __jsx(Banner, {\n            status: \"critical\",\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 32,\n              columnNumber: 25\n            }\n          }, error.message);\n\n          var showToast = hasResults && __jsx(Toast, {\n            content: \"Successfully updated\",\n            onDismiss: function onDismiss() {\n              return setHasResults(false);\n            },\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 36,\n              columnNumber: 25\n            }\n          });\n\n          return __jsx(Frame, {\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 43,\n              columnNumber: 25\n            }\n          }, showToast, __jsx(Layout.Section, {\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 45,\n              columnNumber: 29\n            }\n          }, showError), __jsx(Layout.Section, {\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 49,\n              columnNumber: 29\n            }\n          }, __jsx(Stack, {\n            distribution: \"center\",\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 50,\n              columnNumber: 33\n            }\n          }, __jsx(Button, {\n            primary: true,\n            textAlign: \"center\",\n            onClick: function onClick() {\n              var promise = new Promise(function (resolve) {\n                return resolve();\n              });\n\n              var _loop = function _loop(variantId) {\n                var price = Math.random().toPrecision(3) * 10;\n                var productVariableInput = {\n                  id: _this.props.selectedItems[variantId].variants.edges[0].node.id,\n                  price: price\n                };\n                promise = promise.then(function () {\n                  return handleSubmit({\n                    variables: {\n                      input: productVariableInput\n                    }\n                  });\n                });\n              };\n\n              for (var variantId in _this.props.selectedItems) {\n                _loop(variantId);\n              }\n\n              if (promise) {\n                promise.then(function () {\n                  return _this.props.onUpdate().then(function () {\n                    return setHasResults(true);\n                  });\n                });\n              }\n            },\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 51,\n              columnNumber: 37\n            }\n          }, \"Randomize prices\"))));\n        }, \"3WaEH/2IBD7PFth0zaAOMyPTvFU=\"))\n      );\n    }\n  }]);\n\n  return ApplyRandomPrices;\n}(React.Component);\n\n_defineProperty(ApplyRandomPrices, \"contextType\", Context);\n\nexport default ApplyRandomPrices;","map":{"version":3,"sources":["/home/alexey/test-app-shou-dao/pages/components/ApplyRandomPrices.js"],"names":["React","useState","gql","Mutation","Layout","Button","Banner","Toast","Stack","Frame","Context","UPDATE_PRICE","ApplyRandomPrices","handleSubmit","error","data","hasResults","setHasResults","showError","message","showToast","promise","Promise","resolve","variantId","price","Math","random","toPrecision","productVariableInput","id","props","selectedItems","variants","edges","node","then","variables","input","onUpdate","Component"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport gql from 'graphql-tag';\nimport { Mutation } from 'react-apollo';\nimport { Layout, Button, Banner, Toast, Stack, Frame } from '@shopify/polaris';\nimport { Context } from '@shopify/app-bridge-react';\n\n// GraphQL mutation that updates the prices of products\nconst UPDATE_PRICE = gql`\n  mutation productVariantUpdate($input: ProductVariantInput!) {\n    productVariantUpdate(input: $input) {\n      product {\n        title\n      }\n      productVariant {\n        id\n        price\n      }\n    }\n  }\n`;\n\nclass ApplyRandomPrices extends React.Component {\n    static contextType = Context;\n\n    render() {\n        return ( // Uses mutation's input to update product prices\n            <Mutation mutation={UPDATE_PRICE}>\n                {(handleSubmit, { error, data }) => {\n                    const [hasResults, setHasResults] = useState(false);\n\n                    const showError = error && (\n                        <Banner status=\"critical\">{error.message}</Banner>\n                    );\n\n                    const showToast = hasResults && (\n                        <Toast\n                            content=\"Successfully updated\"\n                            onDismiss={() => setHasResults(false)}\n                        />\n                    );\n\n                    return (\n                        <Frame>\n                            {showToast}\n                            <Layout.Section>\n                                {showError}\n                            </Layout.Section>\n\n                            <Layout.Section>\n                                <Stack distribution={\"center\"}>\n                                    <Button\n                                        primary\n                                        textAlign={\"center\"}\n                                        onClick={() => {\n                                            let promise = new Promise((resolve) => resolve());\n                                            for (const variantId in this.props.selectedItems) {\n                                                const price = Math.random().toPrecision(3) * 10;\n                                                const productVariableInput = {\n                                                    id: this.props.selectedItems[variantId].variants.edges[0].node.id,\n                                                    price: price,\n                                                };\n\n                                                promise = promise.then(() => handleSubmit({ variables: { input: productVariableInput } }));\n                                            }\n\n                                            if (promise) {\n                                                promise.then(() => this.props.onUpdate().then(() => setHasResults(true)));\n                                            }\n                                        }\n                                        }\n                                    >\n                                        Randomize prices\n                                    </Button>\n                                </Stack>\n                            </Layout.Section>\n                        </Frame>\n                    );\n                }}\n            </Mutation>\n        );\n    }\n}\n\nexport default ApplyRandomPrices;\n"]},"metadata":{},"sourceType":"module"}