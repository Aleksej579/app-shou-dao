{"ast":null,"code":"var _jsxFileName = \"/home/alexey/test-app-shou-dao/pages/components/ApplyRandomPrices.js\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState } from 'react';\nimport gql from 'graphql-tag';\nimport { Mutation } from 'react-apollo';\nimport { Layout, Button, Banner, Toast, Stack, Frame } from '@shopify/polaris';\nimport { Context } from '@shopify/app-bridge-react'; // GraphQL mutation that updates the prices of products\n\nconst UPDATE_PRICE = gql`\n  mutation productVariantUpdate($input: ProductVariantInput!) {\n    productVariantUpdate(input: $input) {\n      product {\n        title\n      }\n      productVariant {\n        id\n        price\n      }\n    }\n  }\n`;\n\nclass ApplyRandomPrices extends React.Component {\n  render() {\n    return (// Uses mutation's input to update product prices\n      __jsx(Mutation, {\n        mutation: UPDATE_PRICE,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 13\n        }\n      }, (handleSubmit, {\n        error,\n        data\n      }) => {\n        const {\n          0: hasResults,\n          1: setHasResults\n        } = useState(false);\n\n        const showError = error && __jsx(Banner, {\n          status: \"critical\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 32,\n            columnNumber: 25\n          }\n        }, error.message);\n\n        const showToast = hasResults && __jsx(Toast, {\n          content: \"Successfully updated\",\n          onDismiss: () => setHasResults(false),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 36,\n            columnNumber: 25\n          }\n        });\n\n        return __jsx(Frame, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 25\n          }\n        }, showToast, __jsx(Layout.Section, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 29\n          }\n        }, showError), __jsx(Layout.Section, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 29\n          }\n        }, __jsx(Stack, {\n          distribution: \"center\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 33\n          }\n        }, __jsx(Button, {\n          primary: true,\n          textAlign: \"center\",\n          onClick: () => {\n            let promise = new Promise(resolve => resolve());\n\n            for (const variantId in this.props.selectedItems) {\n              const price = Math.random().toPrecision(3) * 10;\n              const productVariableInput = {\n                id: this.props.selectedItems[variantId].variants.edges[0].node.id,\n                price: price\n              };\n              promise = promise.then(() => handleSubmit({\n                variables: {\n                  input: productVariableInput\n                }\n              }));\n            }\n\n            if (promise) {\n              promise.then(() => this.props.onUpdate().then(() => setHasResults(true)));\n            }\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 37\n          }\n        }, \"Randomize prices\"))));\n      })\n    );\n  }\n\n}\n\n_defineProperty(ApplyRandomPrices, \"contextType\", Context);\n\nexport default ApplyRandomPrices;","map":{"version":3,"sources":["/home/alexey/test-app-shou-dao/pages/components/ApplyRandomPrices.js"],"names":["React","useState","gql","Mutation","Layout","Button","Banner","Toast","Stack","Frame","Context","UPDATE_PRICE","ApplyRandomPrices","Component","render","handleSubmit","error","data","hasResults","setHasResults","showError","message","showToast","promise","Promise","resolve","variantId","props","selectedItems","price","Math","random","toPrecision","productVariableInput","id","variants","edges","node","then","variables","input","onUpdate"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport gql from 'graphql-tag';\nimport { Mutation } from 'react-apollo';\nimport { Layout, Button, Banner, Toast, Stack, Frame } from '@shopify/polaris';\nimport { Context } from '@shopify/app-bridge-react';\n\n// GraphQL mutation that updates the prices of products\nconst UPDATE_PRICE = gql`\n  mutation productVariantUpdate($input: ProductVariantInput!) {\n    productVariantUpdate(input: $input) {\n      product {\n        title\n      }\n      productVariant {\n        id\n        price\n      }\n    }\n  }\n`;\n\nclass ApplyRandomPrices extends React.Component {\n    static contextType = Context;\n\n    render() {\n        return ( // Uses mutation's input to update product prices\n            <Mutation mutation={UPDATE_PRICE}>\n                {(handleSubmit, { error, data }) => {\n                    const [hasResults, setHasResults] = useState(false);\n\n                    const showError = error && (\n                        <Banner status=\"critical\">{error.message}</Banner>\n                    );\n\n                    const showToast = hasResults && (\n                        <Toast\n                            content=\"Successfully updated\"\n                            onDismiss={() => setHasResults(false)}\n                        />\n                    );\n\n                    return (\n                        <Frame>\n                            {showToast}\n                            <Layout.Section>\n                                {showError}\n                            </Layout.Section>\n\n                            <Layout.Section>\n                                <Stack distribution={\"center\"}>\n                                    <Button\n                                        primary\n                                        textAlign={\"center\"}\n                                        onClick={() => {\n                                            let promise = new Promise((resolve) => resolve());\n                                            for (const variantId in this.props.selectedItems) {\n                                                const price = Math.random().toPrecision(3) * 10;\n                                                const productVariableInput = {\n                                                    id: this.props.selectedItems[variantId].variants.edges[0].node.id,\n                                                    price: price,\n                                                };\n\n                                                promise = promise.then(() => handleSubmit({ variables: { input: productVariableInput } }));\n                                            }\n\n                                            if (promise) {\n                                                promise.then(() => this.props.onUpdate().then(() => setHasResults(true)));\n                                            }\n                                        }\n                                        }\n                                    >\n                                        Randomize prices\n                                    </Button>\n                                </Stack>\n                            </Layout.Section>\n                        </Frame>\n                    );\n                }}\n            </Mutation>\n        );\n    }\n}\n\nexport default ApplyRandomPrices;\n"]},"metadata":{},"sourceType":"module"}