{"ast":null,"code":"var _jsxFileName = \"/home/alexey/test-app-shou-dao/pages/components/ResourceList.js\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport { Card, ResourceList, Stack, TextStyle, Thumbnail } from '@shopify/polaris';\nimport store from 'store-js';\nimport { Redirect } from '@shopify/app-bridge/actions';\nimport { Context } from '@shopify/app-bridge-react';\nimport ApplyRandomPrices from './ApplyRandomPrices'; // GraphQL query that retrieves products by ID\n\nconst GET_PRODUCTS_BY_ID = gql`\n  query getProducts($ids: [ID!]!) {\n    nodes(ids: $ids) {\n      ... on Product {\n        title\n        handle\n        descriptionHtml\n        id\n        images(first: 1) {\n          edges {\n            node {\n              originalSrc\n              altText\n            }\n          }\n        }\n        variants(first: 1) {\n          edges {\n            node {\n              price\n              id\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\nclass ResourceListWithProducts extends React.Component {\n  // A constructor that defines selected items and nodes\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedItems: [],\n      selectedNodes: {}\n    };\n  }\n\n  render() {\n    const app = this.context; // Returns products by ID\n\n    return __jsx(Query, {\n      query: GET_PRODUCTS_BY_ID,\n      variables: {\n        ids: store.get('ids')\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 13\n      }\n    }, ({\n      data,\n      loading,\n      error,\n      refetch\n    }) => {\n      // Refetches products by ID\n      if (loading) return __jsx(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 41\n        }\n      }, \"Loading\\u2026\");\n      if (error) return __jsx(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 39\n        }\n      }, error.message);\n      const nodesById = {};\n      data.nodes.forEach(node => nodesById[node.id] = node);\n      return __jsx(React.Fragment, null, __jsx(Card, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 29\n        }\n      }, __jsx(ResourceList, {\n        showHeader: true,\n        resourceName: {\n          singular: 'Product',\n          plural: 'Products'\n        },\n        items: data.nodes,\n        selectable: true,\n        selectedItems: this.state.selectedItems,\n        onSelectionChange: selectedItems => {\n          const selectedNodes = {};\n          selectedItems.forEach(item => selectedNodes[item] = nodesById[item]);\n          return this.setState({\n            selectedItems: selectedItems,\n            selectedNodes: selectedNodes\n          });\n        },\n        renderItem: item => {\n          const media = __jsx(Thumbnail, {\n            source: item.images.edges[0] ? item.images.edges[0].node.originalSrc : '',\n            alt: item.images.edges[0] ? item.images.edges[0].node.altText : '',\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 91,\n              columnNumber: 45\n            }\n          });\n\n          const price = item.variants.edges[0].node.price;\n          return __jsx(ResourceList.Item, {\n            id: item.id,\n            media: media,\n            accessibilityLabel: `View details for ${item.title}`,\n            verticalAlignment: \"center\",\n            onClick: () => {\n              let index = this.state.selectedItems.indexOf(item.id);\n              const node = nodesById[item.id];\n\n              if (index === -1) {\n                this.state.selectedItems.push(item.id);\n                this.state.selectedNodes[item.id] = node;\n              } else {\n                this.state.selectedItems.splice(index, 1);\n                delete this.state.selectedNodes[item.id];\n              }\n\n              this.setState({\n                selectedItems: this.state.selectedItems,\n                selectedNodes: this.state.selectedNodes\n              });\n            },\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 106,\n              columnNumber: 45\n            }\n          }, __jsx(Stack, {\n            alignment: \"center\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 128,\n              columnNumber: 49\n            }\n          }, __jsx(Stack.Item, {\n            fill: true,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 129,\n              columnNumber: 53\n            }\n          }, __jsx(\"h3\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 130,\n              columnNumber: 57\n            }\n          }, __jsx(TextStyle, {\n            variation: \"strong\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 131,\n              columnNumber: 61\n            }\n          }, item.title))), __jsx(Stack.Item, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 136,\n              columnNumber: 53\n            }\n          }, __jsx(\"p\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 137,\n              columnNumber: 57\n            }\n          }, \"$\", price))));\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 33\n        }\n      })), __jsx(ApplyRandomPrices, {\n        selectedItems: this.state.selectedNodes,\n        onUpdate: refetch,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 29\n        }\n      }));\n    });\n  }\n\n}\n\n_defineProperty(ResourceListWithProducts, \"contextType\", Context);\n\nexport default ResourceListWithProducts;","map":{"version":3,"sources":["/home/alexey/test-app-shou-dao/pages/components/ResourceList.js"],"names":["React","gql","Query","Card","ResourceList","Stack","TextStyle","Thumbnail","store","Redirect","Context","ApplyRandomPrices","GET_PRODUCTS_BY_ID","ResourceListWithProducts","Component","constructor","props","state","selectedItems","selectedNodes","render","app","context","ids","get","data","loading","error","refetch","message","nodesById","nodes","forEach","node","id","singular","plural","item","setState","media","images","edges","originalSrc","altText","price","variants","title","index","indexOf","push","splice"],"mappings":"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","sourcesContent":["import React from 'react';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport {\n    Card,\n    ResourceList,\n    Stack,\n    TextStyle,\n    Thumbnail,\n} from '@shopify/polaris';\nimport store from 'store-js';\nimport { Redirect } from '@shopify/app-bridge/actions';\nimport { Context } from '@shopify/app-bridge-react';\nimport ApplyRandomPrices from './ApplyRandomPrices';\n\n// GraphQL query that retrieves products by ID\nconst GET_PRODUCTS_BY_ID = gql`\n  query getProducts($ids: [ID!]!) {\n    nodes(ids: $ids) {\n      ... on Product {\n        title\n        handle\n        descriptionHtml\n        id\n        images(first: 1) {\n          edges {\n            node {\n              originalSrc\n              altText\n            }\n          }\n        }\n        variants(first: 1) {\n          edges {\n            node {\n              price\n              id\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\nclass ResourceListWithProducts extends React.Component {\n    static contextType = Context;\n\n    // A constructor that defines selected items and nodes\n    constructor(props) {\n        super(props);\n        this.state = {\n            selectedItems: [],\n            selectedNodes: {},\n        };\n    }\n\n    render() {\n        const app = this.context;\n\n        // Returns products by ID\n        return (\n            <Query query={GET_PRODUCTS_BY_ID} variables={{ ids: store.get('ids') }}>\n                {({ data, loading, error, refetch }) => { // Refetches products by ID\n                    if (loading) return <div>Loading…</div>;\n                    if (error) return <div>{error.message}</div>;\n\n                    const nodesById = {};\n                    data.nodes.forEach(node => nodesById[node.id] = node);\n\n                    return (\n                        <>\n                            <Card>\n                                <ResourceList\n                                    showHeader\n                                    resourceName={{ singular: 'Product', plural: 'Products' }}\n                                    items={data.nodes}\n                                    selectable\n                                    selectedItems={this.state.selectedItems}\n                                    onSelectionChange={selectedItems => {\n                                        const selectedNodes = {};\n                                        selectedItems.forEach(item => selectedNodes[item] = nodesById[item]);\n\n                                        return this.setState({\n                                            selectedItems: selectedItems,\n                                            selectedNodes: selectedNodes,\n                                        });\n                                    }}\n                                    renderItem={item => {\n                                        const media = (\n                                            <Thumbnail\n                                                source={\n                                                    item.images.edges[0]\n                                                        ? item.images.edges[0].node.originalSrc\n                                                        : ''\n                                                }\n                                                alt={\n                                                    item.images.edges[0]\n                                                        ? item.images.edges[0].node.altText\n                                                        : ''\n                                                }\n                                            />\n                                        );\n                                        const price = item.variants.edges[0].node.price;\n                                        return (\n                                            <ResourceList.Item\n                                                id={item.id}\n                                                media={media}\n                                                accessibilityLabel={`View details for ${item.title}`}\n                                                verticalAlignment=\"center\"\n                                                onClick={() => {\n                                                    let index = this.state.selectedItems.indexOf(item.id);\n                                                    const node = nodesById[item.id];\n                                                    if (index === -1) {\n                                                        this.state.selectedItems.push(item.id);\n                                                        this.state.selectedNodes[item.id] = node;\n                                                    } else {\n                                                        this.state.selectedItems.splice(index, 1);\n                                                        delete this.state.selectedNodes[item.id];\n                                                    }\n\n                                                    this.setState({\n                                                        selectedItems: this.state.selectedItems,\n                                                        selectedNodes: this.state.selectedNodes,\n                                                    });\n                                                }}\n                                            >\n                                                <Stack alignment=\"center\">\n                                                    <Stack.Item fill>\n                                                        <h3>\n                                                            <TextStyle variation=\"strong\">\n                                                                {item.title}\n                                                            </TextStyle>\n                                                        </h3>\n                                                    </Stack.Item>\n                                                    <Stack.Item>\n                                                        <p>${price}</p>\n                                                    </Stack.Item>\n                                                </Stack>\n                                            </ResourceList.Item>\n                                        );\n                                    }}\n                                />\n                            </Card>\n\n                            <ApplyRandomPrices selectedItems={this.state.selectedNodes} onUpdate={refetch} />\n                        </>\n                    );\n                }}\n            </Query>\n        );\n    }\n}\n\nexport default ResourceListWithProducts;\n"]},"metadata":{},"sourceType":"module"}